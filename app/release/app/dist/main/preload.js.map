{"version":3,"file":"preload.js","mappings":"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","sources":["webpack://@krud-dev/boost/webpack/universalModuleDefinition","webpack://@krud-dev/boost/webpack/bootstrap","webpack://@krud-dev/boost/webpack/runtime/make namespace object","webpack://@krud-dev/boost/external node-commonjs \"electron\"","webpack://@krud-dev/boost/./src/infra/rendererUtils/renderer.ts","webpack://@krud-dev/boost/./src/infra/subscriptions/renderer.ts","webpack://@krud-dev/boost/./src/infra/ui/renderer.ts","webpack://@krud-dev/boost/./src/infra/utils/platform.ts","webpack://@krud-dev/boost/./src/infra/store/renderer.ts","webpack://@krud-dev/boost/./src/infra/autoupdate/renderer.ts","webpack://@krud-dev/boost/./src/infra/demo/renderer.ts","webpack://@krud-dev/boost/./src/main/preload.ts","webpack://@krud-dev/boost/./src/infra/daemon/renderer.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { ipcRenderer } from 'electron';\n\nexport const utilsBridge: UtilsBridge = {\n  async uuidv4() {\n    return ipcRenderer.invoke('utils:uuidv4');\n  },\n  async readClipboardText() {\n    return ipcRenderer.invoke('utils:readClipboardText');\n  },\n};\n","import { ipcRenderer } from 'electron';\n\nexport const subscriptionsBridge: SubscriptionsBridge = {\n  subscribe: (channel, listener) => {\n    ipcRenderer.on(channel, listener);\n    return () => {\n      ipcRenderer.removeListener(channel, listener);\n    };\n  },\n};\n","import { ipcRenderer } from 'electron';\nimport { ElectronTheme, ThemeSource } from './models/electronTheme';\nimport { isLinux, isMac, isWindows } from '../utils/platform';\nimport electronDl from 'electron-dl';\n\nexport const uiServiceBridge: UiServiceBridge = {\n  getTheme(): Promise<ElectronTheme> {\n    return ipcRenderer.invoke('uiService:getTheme');\n  },\n  getThemeSource(): Promise<ThemeSource> {\n    return ipcRenderer.invoke('uiService:getThemeSource');\n  },\n\n  setThemeSource(themeSource: ThemeSource): Promise<void> {\n    return ipcRenderer.invoke('uiService:setThemeSource', themeSource);\n  },\n\n  minimizeWindow(): Promise<void> {\n    return ipcRenderer.invoke('uiService:minimizeWindow');\n  },\n  maximizeWindow(): Promise<void> {\n    return ipcRenderer.invoke('uiService:maximizeWindow');\n  },\n  closeWindow(): Promise<void> {\n    return ipcRenderer.invoke('uiService:closeWindow');\n  },\n\n  restartApp(): Promise<void> {\n    return ipcRenderer.invoke('uiService:restartApp');\n  },\n\n  downloadFile(url: string, options?: electronDl.Options): Promise<void> {\n    return ipcRenderer.invoke('uiService:downloadFile', url, options);\n  },\n\n  getAppVersion(): Promise<string> {\n    return ipcRenderer.invoke('uiService:getAppVersion');\n  },\n\n  isMac: isMac,\n  isWindows: isWindows,\n  isLinux: isLinux,\n};\n","const isMac = process.platform === 'darwin';\nconst isWindows = process.platform === 'win32';\nconst isLinux = process.platform === 'linux';\n\nexport { isMac, isWindows, isLinux };\n","import { ipcRenderer } from 'electron';\nimport { Configuration } from './store';\n\nexport const configurationStoreBridge: ConfigurationBridge<keyof Configuration> = {\n  get<T>(key: string): T {\n    return ipcRenderer.sendSync('configurationStore:get', key);\n  },\n  set<T>(property: string, val: T) {\n    ipcRenderer.send('configurationStore:set', property, val);\n  },\n  has(key: string): boolean {\n    return ipcRenderer.sendSync('configurationStore:has', key);\n  },\n  delete(key: string): void {\n    ipcRenderer.send('configurationStore:delete', key);\n  },\n  reset(key: string): void {\n    ipcRenderer.send('configurationStore:reset', key);\n  },\n  clear(): void {\n    ipcRenderer.send('configurationStore:clear');\n  },\n  isErrorReportingEnabled(): boolean {\n    return ipcRenderer.sendSync('configurationStore:get', 'errorReportingEnabled');\n  },\n  setErrorReportingEnabled(enabled: boolean): void {\n    ipcRenderer.send('configurationStore:set', 'errorReportingEnabled', enabled);\n  },\n  isAutoUpdateEnabled(): boolean {\n    return ipcRenderer.sendSync('configurationStore:get', 'autoUpdateEnabled');\n  },\n  setAutoUpdateEnabled(enabled: boolean): void {\n    ipcRenderer.send('configurationStore:set', 'autoUpdateEnabled', enabled);\n  },\n};\n","import { ipcRenderer } from 'electron';\n\nexport const appUpdaterBridge: AppUpdaterBridge = {\n  checkForUpdates: () => ipcRenderer.invoke('appUpdater:checkForUpdates'),\n  downloadUpdate: () => ipcRenderer.send('appUpdater:downloadUpdate'),\n  quitAndInstall: () => ipcRenderer.send('appUpdater:quitAndInstall'),\n};\n","import { ipcRenderer } from 'electron';\n\nexport const demoBridge: DemoBridge = {\n  startDemo(): Promise<string> {\n    return ipcRenderer.invoke('demo:start');\n  },\n\n  stopDemo(): Promise<void> {\n    return ipcRenderer.invoke('demo:stop');\n  },\n\n  getDemoAddress(): string {\n    return ipcRenderer.sendSync('demo:getAddress');\n  },\n  isStarted(): boolean {\n    return ipcRenderer.sendSync('demo:isStarted');\n  },\n};\n","import { contextBridge } from 'electron';\nimport { utilsBridge } from '../infra/rendererUtils/renderer';\nimport { subscriptionsBridge } from '../infra/subscriptions/renderer';\nimport { uiServiceBridge } from '../infra/ui/renderer';\nimport { daemonAddressSupplier, daemonHealthySupplier, daemonWsAddressSupplier } from '../infra/daemon/renderer';\nimport { configurationStore } from '../infra/store/store';\nimport { configurationStoreBridge } from '../infra/store/renderer';\nimport { appUpdaterBridge } from '../infra/autoupdate/renderer';\nimport { demoBridge } from '../infra/demo/renderer';\n\ncontextBridge.exposeInMainWorld('utils', utilsBridge);\ncontextBridge.exposeInMainWorld('subscriptions', subscriptionsBridge);\ncontextBridge.exposeInMainWorld('ui', uiServiceBridge);\ncontextBridge.exposeInMainWorld('isElectron', true);\ncontextBridge.exposeInMainWorld('daemonAddress', daemonAddressSupplier());\ncontextBridge.exposeInMainWorld('daemonWsAddress', daemonWsAddressSupplier());\ncontextBridge.exposeInMainWorld('daemonHealthy', daemonHealthySupplier);\ncontextBridge.exposeInMainWorld('NODE_ENV', process.env.NODE_ENV);\ncontextBridge.exposeInMainWorld('configurationStore', configurationStoreBridge);\ncontextBridge.exposeInMainWorld('appUpdater', appUpdaterBridge);\ncontextBridge.exposeInMainWorld('demo', demoBridge);\n","import { ipcRenderer } from 'electron';\n\nexport const daemonAddressSupplier = (): string => ipcRenderer.sendSync('daemon:address');\n\nexport const daemonWsAddressSupplier = (): string => ipcRenderer.sendSync('daemon:wsAddress');\n\nexport const daemonHealthySupplier = (): boolean => ipcRenderer.sendSync('daemon:healthy');\n"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","require","utilsBridge","async","ipcRenderer","subscriptionsBridge","subscribe","channel","listener","uiServiceBridge","getTheme","getThemeSource","setThemeSource","themeSource","minimizeWindow","maximizeWindow","closeWindow","restartApp","downloadFile","url","options","getAppVersion","isMac","process","platform","isWindows","isLinux","configurationStoreBridge","get","key","set","property","val","has","delete","reset","clear","isErrorReportingEnabled","setErrorReportingEnabled","enabled","isAutoUpdateEnabled","setAutoUpdateEnabled","appUpdaterBridge","checkForUpdates","downloadUpdate","quitAndInstall","demoBridge","startDemo","stopDemo","getDemoAddress","isStarted","contextBridge"],"sourceRoot":""}
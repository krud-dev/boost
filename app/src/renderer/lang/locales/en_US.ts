export default {
  theme: 'Theme',
  system: 'System',
  light: 'Light',
  dark: 'Dark',
  developerMode: 'Developer Mode',
  on: 'On',
  off: 'Off',
  folder: 'Folder',
  createFolder: 'Create Folder',
  createApplication: 'Create Application',
  createInstance: 'Create Instance',
  unknownInstance: 'Unknown Instance',
  updateFolder: 'Update Folder',
  updateApplication: 'Update Application',
  updateInstance: 'Update Instance',
  addFolder: 'Add Folder',
  addApplication: 'Add Application',
  addInstance: 'Add Instance',
  alias: 'Alias',
  name: 'Name',
  applicationName: 'Application Name',
  description: 'Description',
  run: 'Run',
  selected: 'Selected',
  create: 'Create',
  rename: 'Rename',
  select: 'Select',
  search: 'Search',
  save: 'Save',
  update: 'Update',
  cancel: 'Cancel',
  copy: 'Copy',
  value: 'Value',
  value2: 'Second Value',
  addYourFirstInstance: 'Add your first actuator instance',
  collapseAll: 'Collapse All',
  expandAll: 'Expand All',
  export: 'Export',
  exportConfiguration: 'Export Configuration',
  exportConfigurationDescription:
    'Export the configuration of your instances, applications and folders as a JSON file.',
  exportConfigurationAuthenticationWarning:
    'The configuration file contains sensitive information such as authentication details. Keep it safe.',
  import: 'Import',
  importConfiguration: 'Import Configuration',
  importConfigurationDescription: 'Import a JSON configuration file to add instances, applications and folders.',
  selectFileToImport: 'Select file to import',
  dropOrSelectFile: 'Drop or Select file',
  dropFilesHereOrClick: 'Drop files here or click browse thorough your machine',
  invalidFieldUpload: 'Cannot upload selected file.',
  invalidFieldUploadTooLarge: 'Cannot upload selected file. File size too large.',
  invalidFieldUploadTooSmall: 'Cannot upload selected file. File size too small.',
  invalidFieldUploadTooManyFiles: 'Cannot upload selected file. Too many files selected.',
  invalidFieldUploadInvalidType: 'Cannot upload selected file. Invalid file type.',
  delete: 'Delete',
  areYouSureYouWantToDelete: 'Are you sure you want to delete "{name}"?',
  areYouSureYouWantToShutdown: 'Are you sure you want to shutdown "{name}"?',
  shutdownRequestSuccessful: 'Shutdown request was successful. It may take a few seconds for the instance to shutdown.',
  shutdownInstanceDisabled: 'Shutdown is only available for healthy instances with the shutdown endpoint enabled',
  actuatorUrl: 'Actuator URL',
  actuatorUrls: 'Actuator URLs',
  requiredField: 'Required field',
  setColor: 'Set Color',
  chooseColor: 'Choose Color',
  insights: 'Insights',
  dashboard: 'Dashboard',
  globalDashboard: 'Global Dashboard',
  metrics: 'Metrics',
  quartz: 'Quartz',
  cron: 'Cron',
  nextRun: 'Next Run',
  scheduledTasks: 'Scheduled Tasks',
  fixedDelay: 'Fixed Delay',
  fixedRate: 'Fixed Rate',
  custom: 'Custom',
  flyway: 'Flyway',
  liquibase: 'Liquibase',
  environment: 'Environment',
  bean: 'Bean',
  beans: 'Beans',
  beansGraph: 'Beans Graph',
  manage: 'Manage',
  loggers: 'Loggers',
  caches: 'Caches',
  cacheManager: 'Cache Manager',
  monitor: 'Monitor',
  jvm: 'JVM',
  origin: 'Origin',
  threadDump: 'Thread Dump',
  threadProfiling: 'Thread Profiling',
  heapDump: 'Heap Dump',
  testConnection: 'Test Connection',
  testConnectionToInstanceSuccess: 'Connection to instance was successful',
  testConnectionToInstanceFailed: 'Connection to instance failed',
  statusCode: 'Status Code',
  message: 'Message',
  copyToClipboardSuccess: 'Copied to clipboard',
  copyToClipboardFailed: 'Failed to copy to clipboard',
  copyId: 'Copy ID',
  copyJson: 'Copy JSON',
  up: 'Up',
  down: 'Down',
  outOfService: 'Out of Service',
  unreachable: 'Unreachable',
  unknown: 'Unknown',
  invalid: 'Invalid',
  mixed: 'Mixed',
  empty: 'Empty',
  loading: 'Loading',
  dataCollection: 'Data Collection',
  notSupported: 'Not Supported',
  settings: 'Settings',
  general: 'General',
  tasks: 'Tasks',
  actions: 'Actions',
  evict: 'Evict',
  evictAll: 'Evict All',
  daysShort: 'd',
  hoursShort: 'h',
  minutesShort: 'm',
  secondsShort: 's',
  millisecondsShort: 'ms',
  dataCollectionModeOn: 'Data collection from actuator instances is enabled',
  dataCollectionModeOff: 'Data collection from actuator instances is disabled',
  dataCollectionModeInherited: 'Inherited from parent application',
  noData: 'No data',
  taskStartedSuccessfully: 'Task "{name}" started successfully',
  evictedCacheSuccessfully: 'Evicted Cache "{names}" successfully',
  evictedAllCachesSuccessfully: 'Evicted all caches successfully',
  activeProfile: 'Active Profile',
  noActiveProfiles: 'No active profiles',
  loadingActiveProfiles: 'Loading active profiles...',
  errorLoadingActiveProfiles: 'Error loading active profiles',
  instances: 'Instances',
  applications: 'Applications',
  healthStatus: 'Health Status',
  lastUpdateTime: 'Last Update Time',
  lastChangeTime: 'Last Change Time',
  scope: 'Scope',
  type: 'Type',
  dependencies: 'Dependencies',
  package: 'Package',
  properties: 'Properties',
  appProperties: 'App Properties',
  systemProperties: 'System Properties',
  systemEnvironment: 'System Environment',
  uri: 'URI',
  httpRequests: 'HTTP Requests',
  count: 'Count',
  maxTime: 'Max Time',
  totalTime: 'Total Time',
  gets: 'Gets',
  puts: 'Puts',
  evictions: 'Evictions',
  hits: 'Hits',
  misses: 'Misses',
  removals: 'Removals',
  size: 'Size',
  total: 'Total',
  methods: 'Methods',
  statuses: 'Statuses',
  outcomes: 'Outcomes',
  exceptions: 'Exceptions',
  notAvailable: 'N/A',
  widgetNotAvailable: 'Widget not available',
  true: 'True',
  false: 'False',
  script: 'Script',
  state: 'State',
  executionTime: 'Execution Time',
  installedBy: 'Installed By',
  installedOn: 'Installed On',
  installedRank: 'Installed Rank',
  version: 'Version',
  checksum: 'Checksum',
  application: 'Application',
  instance: 'Instance',
  instanceAliasUnreachable: 'Instance "{alias}" is unreachable',
  instanceAliasInvalid: 'Instance "{alias}" URL is invalid',
  instanceAliasPending: 'Instance "{alias}" is loading',
  instanceMissingAbility: 'Instance "{alias}" missing ability "{ability}"',
  checkNetworkAndActuatorUrl: 'Please check the network connection and make sure the actuator URL is correct',
  checkActuatorUrlNotActiveInstance: 'Check actuator URL, the url provided does not return an active actuator instance',
  checkActuatorSupportedAbilities: 'Check the actuator supported abilities',
  learnMoreAboutInstanceAbilities: 'Learn more about instance abilities',
  dataAvailableWhenConnection: 'Data will be available when the connection is established',
  error: 'Error',
  metricsNotAvailableInstance: 'Metrics are not available for this instance',
  metricNotifications: 'Metric Notifications',
  addMetricNotification: 'Add Metric Notification',
  updateMetricNotification: 'Update Metric Notification',
  metricNotificationsExplanation:
    'Add metric notifications to monitor your applications and receive alerts when a metric value is above, below or within a threshold.',
  notificationName: 'Notification Name',
  notifications: 'Notifications',
  notificationsSound: 'Notifications Sound',
  notReceivingNotifications:
    'If you are not receiving notifications make sure that your operating system allows notifications from this app.',
  noRelevantPredefinedNotificationsFound: 'No relevant predefined notifications found',
  addSelectedNotifications: 'Add Selected Notifications',
  addPredefinedNotifications: 'Add Predefined Notifications',
  greaterThan: 'Greater Than',
  lowerThan: 'Lower Than',
  between: 'Between',
  operation: 'Operation',
  metric: 'Metric',
  lastStatusChangeTime: 'Last Status Change Time',
  additionalInformation: 'Additional Information',
  executionType: 'Execution Type',
  author: 'Author',
  changelog: 'Changelog',
  comments: 'Comments',
  dateExecuted: 'Date Executed',
  orderExecuted: 'Order Executed',
  id: 'ID',
  deploymentId: 'Deployment ID',
  tag: 'Tag',
  context: 'Context',
  contexts: 'Contexts',
  labels: 'Labels',
  refreshStatus: 'Refresh Status',
  level: 'Level',
  reset: 'Reset',
  configured: 'Configured',
  classes: 'Classes',
  invalidUrl: 'Invalid URL',
  invalidNumber: 'Invalid number',
  overview: 'Overview',
  language: 'Language',
  download: 'Download',
  requestTime: 'Request Time',
  creationTime: 'Creation Time',
  requestHeapdump: 'Request Heapdump',
  requestHeapdumpExplanation:
    'Click on the "Request Heapdump" button next to the search bar to generate a new heapdump. Heapdump will be generated in the background. Once it is ready, you will be able to download it.',
  heapdumpRequestedSuccessfully: 'Heapdump requested successfully',
  heapdumpDownloadFailed: 'Heapdump download failed',
  pending: 'Pending',
  downloading: 'Downloading',
  ready: 'Ready',
  failed: 'Failed',
  createMultipleInstances: 'Create Multiple Instances',
  createSingleInstance: 'Create Single Instance',
  target: 'Target',
  initialDelay: 'Initial Delay',
  interval: 'Interval',
  expression: 'Expression',
  trigger: 'Trigger',
  jobs: 'Jobs',
  triggers: 'Triggers',
  className: 'Class Name',
  durable: 'Durable',
  requestRecovery: 'Request Recovery',
  details: 'Details',
  data: 'Data',
  priority: 'Priority',
  previousFireTime: 'Previous Fire Time',
  nextFireTime: 'Next Fire Time',
  finalFireTime: 'Final Fire Time',
  startTime: 'Start Time',
  endTime: 'End Time',
  calendarName: 'Calendar Name',
  calendarInterval: 'Calendar Interval',
  timeZone: 'Time Zone',
  timesTriggered: 'Times Triggered',
  preserveHourOfDayAcrossDaylightSavings: 'Preserve Hour of Day Across Daylight Savings',
  skipDayIfHourDoesNotExist: 'Skip Day If Hour Does Not Exist',
  dailyTimeInterval: 'Daily Time Interval',
  daysOfWeek: 'Days of Week',
  startTimeOfDay: 'Start Time of Day',
  endTimeOfDay: 'End Time of Day',
  repeatCount: 'Repeat Count',
  simple: 'Simple',
  yes: 'Yes',
  no: 'No',
  integrationGraph: 'Integration Graph',
  group: 'Group',
  running: 'Running',
  finished: 'Finished',
  requestThreadProfiling: 'Request Thread Profiling',
  requestThreadProfilingExplanation:
    'Click on the "Request Thread Profiling" button next to the search bar to generate a new thread dump. Thread dump will be generated in the background. Once it is ready, you will be able to view the details.',
  durationSeconds: 'Duration (seconds)',
  logs: 'Logs',
  status: 'Status',
  threadProfilingInitiated: 'Thread profiling initiated',
  threadDumpDetails: 'Thread Dump Details',
  viewDetails: 'View Details',
  threadId: 'Thread ID',
  threadName: 'Thread Name',
  threadState: 'Thread State',
  blockedTime: 'Blocked Time',
  blockedCount: 'Blocked Count',
  waitedTime: 'Waited Time',
  waitedCount: 'Waited Count',
  lockName: 'Lock Name',
  lockOwnerId: 'Lock Owner ID',
  lockOwnerName: 'Lock Owner Name',
  stackTrace: 'Stack Trace',
  index: 'Index',
  time: 'Time',
  close: 'Close',
  baseUnit: 'Base Unit',
  measurements: 'Measurements',
  tags: 'Tags',
  process: 'Process',
  uptime: 'Uptime',
  cpuCount: 'CPU Count',
  threadCount: 'Thread Count',
  liveThreadCount: 'Live Thread Count',
  daemonThreadCount: 'Daemon Thread Count',
  memoryUsageMb: 'Memory Usage (MB)',
  memoryUsedMb: 'Memory Used (MB)',
  memoryCommittedMb: 'Memory Committed (MB)',
  memoryUsage: 'Memory Usage',
  diskUsage: 'Disk Usage',
  cpuUsage: 'CPU Usage',
  showGraph: 'Show Graph',
  url: 'URL',
  mappings: 'Mappings',
  servletFilters: 'Servlet Filters',
  servlets: 'Servlets',
  urlPatternMappings: 'URL Pattern Mappings',
  servletNameMappings: 'Servlet Name Mappings',
  handler: 'Handler',
  predicate: 'Predicate',
  dispatcherServlets: 'Dispatcher Servlets',
  dispatcherHandlers: 'Dispatcher Handlers',
  method: 'Method',
  produce: 'Produce',
  metricNotFound: 'Metric not found',
  statistic: 'Statistic',
  repeating: 'Repeating',
  allowTracking: 'Allow Tracking',
  allowTrackingDescription:
    'Allow the app to anonymously track usage statistics. The data collected is used to improve the app and will not be shared with anyone.',
  expandDetails: 'Expand Details',
  collapseDetails: 'Collapse Details',
  refresh: 'Refresh',
  troubleshooting: 'Troubleshooting',
  checkActuatorUrl: 'Check actuator URL',
  checkAuthenticationConfiguration: 'Check authentication configuration',
  authenticationType: 'Authentication Type',
  inherit: 'Inherit',
  basic: 'Basic',
  none: 'None',
  querystring: 'Querystring',
  header: 'Header',
  bearer: 'Bearer',
  username: 'Username',
  password: 'Password',
  key: 'Key',
  token: 'Token',
  effectiveAuthentication: 'Effective Authentication',
  daemonIsDown: 'Daemon is Down',
  backgroundServiceCrashed: 'The background service has crashed. Please restart the app.',
  restartApp: 'Restart App',
  root: 'Root',
  cannotConnectToInstance: 'Cannot connect to instance',
  openRepository: 'Open Repository',
  openDocumentation: 'Open Documentation',
  authenticationUsedFrom: 'Authentication used from {type} {name}.',
  showStatistics: 'Show Statistics',
  statistics: 'Statistics',
  remaining: 'Remaining',
  appVersion: 'App Version',
  appUpdateAvailable: 'App Update Available',
  newVersionIsAvailable: 'A new version of Ostara is available ({version}).',
  newVersionIsAvailableAndReady: 'A new version of Ostara is available. Version {version} is ready to download.',
  checkForUpdates: 'Check for Updates',
  appIsUpToDate: 'App is Up-to-date',
  appUpdateReady: 'App Update Ready',
  appUpdateDownloadedAndReady: 'App update downloaded successfully and ready to install.',
  downloadUpdate: 'Download Update',
  downloadStarted: 'Download Started',
  quitAndInstall: 'Quit and Install',
  skipVersion: 'Skip Version',
  readMore: 'Read More',
  changeIcon: 'Change Icon',
  cacheStatisticsNotAvailable: 'Cache statistics not available',
  heapdumpNotReady: 'Heapdump not ready',
  profilingRequestNotFinished: 'Profiling request not finished',
  whatsNew: "What's New",
  appVersionUpdated: 'App version updated',
  allowErrorReporting: 'Allow Error Reporting',
  allowErrorReportingDescription:
    'Allow the app to anonymously collect exceptions and crash reports. The data collected is used to improve the app and will not be shared with anyone.',
  restartAppChangesTakeAffect: '{restart} the app to apply changes.',
  restart: 'Restart',
  automaticUpdates: 'Automatic Updates',
  welcomeToApp: 'Welcome to Ostara!',
  getStartedAddFirstInstance:
    'Get started by adding your first Spring Boot actuator instance. Monitor and manage your Spring Boot applications with ease. Enjoy!',
  appIsOpenSource: 'Ostara is Open Source',
  checkOutTheSourceCode:
    'Check out the source code on GitHub. Feel free to contribute, comment, open issues or ask questions.',
  considerStarringTheRepository: 'If you find Ostara useful, please consider starring the repository. Thank you!',
  documentation: 'Documentation',
  documentationSideGetStarted:
    'We have created a documentation site to help you get started with Ostara. If you have any questions, we are also available on Discord.',
  gettingStarted: 'Getting Started',
  alreadyHaveInstanceAddIt:
    'If you already have a Spring Boot instance with actuator enabled, add it to Ostara by clicking the "Create Instance" button.',
  gettingStartedSteps:
    'If you are new to Spring Boot actuator follow the steps below to get started.\n1. Build a Spring Boot application with actuator enabled.\n2. Run the application.\n3. Add the application to Ostara by clicking the "Create Instance" button.\n4. Monitor and manage your Spring Boot application with ease.\n5. Enjoy!',
  dismiss: 'Dismiss',
  learnMore: 'Learn More',
  valuesMaskedLearnMore: 'Values returned from actuator are masked. {learnMore}',
  somethingWentWrong: 'Something went wrong',
  somethingWentWrongExplanation: "Sorry, we couldn't complete the requested action.",
  goToHome: 'Go to Home',
  logLevel: 'Log Level',
  enterCustomLogLevel: 'Enter Custom Log Level',
  star: 'Star',
  feedback: 'Feedback',
  feedbackHelpImprove:
    'We would love to hear your feedback. Any feature request, recommendation or bug report is more than welcome. Please let us know what you think and help us improve.',
  openIssue: 'Open Issue',
  sendEmail: 'Send Email',
  startDemo: 'Start Demo',
  startDemoInstance: 'Start Demo Instance',
  stopDemo: 'Stop Demo',
  restartDemo: 'Restart Demo',
  demoServiceLoading: 'Demo service is loading...',
  takeTimeToLoadDemo: 'It can take a few minutes to load the demo service.',
  or: 'or',
  disableSslVerification: 'Disable SSL Verification',
  togglz: 'Togglz',
  strategy: 'Strategy',
  toggle: 'Toggle',
  allFeatures: 'All Features',
  disableAll: 'Disable All',
  enableAll: 'Enable All',
  parameters: 'Parameters',
  attributes: 'Attributes',
  discord: 'Discord',
  joinDiscord: 'Join Discord',
  shutdown: 'Shutdown',
  home: 'Home',
  back: 'Back',
  forward: 'Forward',
  clearFilters: 'Clear Filters',
  selectedItemIsFiltered: 'Selected item is filtered',
  relative: 'Relative',
  metricRuleExplanationSimple:
    'Use "Simple" to compare a metric to the value. For example: disk.free[VALUE] < 1000000.',
  metricRuleExplanationRelative:
    'Use "Relative" to compare a metric divided by another metric to the value. For example: disk.free[VALUE] / disk.total[VALUE] < 0.1.',
  divisorMetric: 'Relative Metric',
  formula: 'Formula',
  summary: 'Summary',
  send: 'Send',
  email: 'Email',
  sendFeedback: 'Send Feedback',
  sendFeedbackDescription:
    'We would love to hear your feedback. Any feature request, recommendation or bug report is more than welcome. Please let us know what you think and help us improve.',
  sendFeedbackSuccess: 'Feedback sent successfully. Thank you!',
  applicationIsEmpty: 'Application is empty',
  folderIsEmpty: 'Folder is empty',
  dashboardIsEmpty: 'Dashboard is empty',
  addNewInstanceByClicking: 'Add a new instance by clicking the button below.',
  notificationTitleApplicationAllUp: '{application} is UP',
  notificationBodyApplicationAllUp: 'All instances of {application} are UP.',
  notificationTitleApplicationAllDown: '{application} is DOWN',
  notificationBodyApplicationAllDown: 'All instances of {application} are DOWN.',
  notificationTitleApplicationPartiallyUp: '{application} is PARTIALLY UP',
  notificationBodyApplicationPartiallyUp: 'Some instances of {application} are UP.',
  notificationTitleApplicationPartiallyDown: '{application} is PARTIALLY DOWN',
  notificationBodyApplicationPartiallyDown: 'Some instances of {application} are DOWN.',
  notificationTitleApplicationMetricRule: 'Metric notification {metricRule} for {application}',
  notificationBodyApplicationMetricRuleGreaterThan: '{metric} is above {value} at {values} for {instances}.',
  notificationBodyApplicationMetricRuleLowerThan: '{metric} is below {value} at {values} for {instances}.',
  notificationBodyApplicationMetricRuleBetween: '{metric} is between {value} and {value2} at {values} for {instances}.',
};
